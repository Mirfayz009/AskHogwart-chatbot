from typing import Final
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# Bot Token & Username
TOKEN: Final = '7758474722:AAHj66UYEHt3ptXJYoOC-SbwdhO9KHdBRuA'
BOT_USERNAME: Final = '@Hogwartschotbot'

# Start Command
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('''Hello! üëã
This bot can answer questions about the Hogwarts School summer camp.
Feel free to ask me! Use /question to see available questions and just choose number of question which you want.''')

# Question Command
async def question_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('''
1. Can I get information about ‚ÄúHogwarts Summer School‚Äù?
2. What are the goals of this project?
3. Who can participate?
4. When can I register for this program?
5. How will selection proceed?
6. Which subjects are included to apply?
7. How much does this program cost?
8. How many participants are taken into this program?
9. Can I get contact information?
10. Has this program been done before?
11. Are there any activities planned?
12. Where does this camp take place?
13. Where can I follow ‚ÄúHogwarts Summer School‚Äù?
14. Can I get more information?
''')

# Response Handler
def handle_response(text: str) -> str:
    print(f'Processing input: {text}')  # Debugging output

    responses = {
        '1': 'It is a one-week research camp for high school and university students, organized by New Uzbekistan University.',
        '2': 'Develop research skills, build a vibrant community, and foster leadership and future thinkers.',
        '3': 'Students from grades 9-11 and university students (freshmen to seniors).',
        '4': 'Admissions start from mid-April and run until late May or early June.',
        '5': 'Selection occurs in three stages: Essay & CV submission, case study, and interview.',
        '6': 'Subjects include Computer Science, Institutions, Ecology, Education, and Global Perspective.',
        '7': 'Approximately $87 will be needed per participant.',
        '8': 'The camp can accommodate up to 200 participants.',
        '9': 'Contact: +998 71-202-41-11 or Email: info@newuu.uz',
        '10': 'Yes, since 2022. Statistics available at: https://hogwarts.streamlit.app',
        '11': 'Planned activities include Quidditch tournaments, Mythical Beast Care, and Charms for Collaboration.',
        '12': 'Located at ‚ÄúRenaissance Camp‚Äù in the mountains near Tashkent.',
        '13': 'Telegram: https://t.me/Hogwarts_NewUU\nYouTube: https://www.youtube.com/@CampOfNewUzbekistanUniversity\nInstagram: https://www.instagram.com/hogwarts_newuu/',
        '14': 'More info: https://docs.google.com/document/d/1PmXpxXUvaAMN_hnCxNfrh8o3fUu0hVQSg3VKsWR0k7Y/edit?tab=t.0'
    }

    return responses.get(text, "Please enter a valid number for the question.")

# Message Handler
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_type = update.message.chat.type
    text = update.message.text

    print(f'Received message from user({update.message.chat.id}) in {message_type}: "{text}" ')  # Debugging output

    if message_type == 'group':
        if BOT_USERNAME in text:
            new_text = text.replace(BOT_USERNAME, ' ').strip()
            response = handle_response(new_text)
        else:
            return
    else:
        response = handle_response(text)

    print('Bot response:', response)  # Debugging output
    await update.message.reply_text(response)

# Error Handler
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f'Update {update} caused error {context.error}')

# Main Execution
if __name__ == '__main__':
    print('Starting bot...')
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('question', question_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error)

    print('Polling...')
    app.run_polling(poll_interval=3)
